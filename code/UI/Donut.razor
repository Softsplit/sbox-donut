@using System
@using System.Text
@using System.Threading.Tasks
@using Sandbox
@inherits PanelComponent
@namespace Softsplit.Donut

<root>
    <div class="donut-canvas">@DonutOutput</div>
    <div class="leaderboard">
        @if (leaderboard is not null)
        {
            <h1>Most Time Wasted</h1>
            <div class="entries">
                @foreach (var entry in leaderboard.Entries)
                {
                    <div class="entry @IsMe(entry)">
                        <div class="rank">@entry.Rank.</div>
                        <div class="name">@entry.DisplayName</div>
                        <div class="value">@entry.FormattedValue</div>
                    </div>
                }
            </div>
        }
    </div>
    <div class="counter">@Counter</div>
</root>

@code
{
    private StringBuilder DonutOutput { get; set; }
    private string Counter { get; set; }
    private long Time { get; set; }

    protected override void OnEnabled()
    {
        base.OnEnabled();

        _ = UpdateLeaderboardInfo();
        _ = UpdateDonut();
        _ = UpdateTime();
    }

    protected override int BuildHash() => HashCode.Combine(RealTime.Now);

    private async Task UpdateDonut()
    {
        while (true)
        {
            StateHasChanged();

            DonutOutput = await RenderDonut();

            StateHasChanged();

            await Task.DelayRealtimeSeconds(0.03f);
        }
    }

    private Sandbox.Services.Leaderboards.Board leaderboard;

    private async Task UpdateLeaderboardInfo()
    {
        leaderboard = Sandbox.Services.Leaderboards.Get("time");
        leaderboard.MaxEntries = 10;

        while (true)
        {
            StateHasChanged();

            await leaderboard.Refresh();

            StateHasChanged();

            await Task.DelayRealtimeSeconds(1f);
        }
    }

    string IsMe(Sandbox.Services.Leaderboards.Entry entry)
    {
        return entry.Me ? "me" : "";
    }

    private int hours;
    private int minutes;
    private int seconds;

    private async Task UpdateTime()
    {
        while (true)
        {
            StateHasChanged();

            seconds++;
            if (seconds == 60)
            {
                seconds = 0;
                minutes++;
            }
            if (minutes == 60)
            {
                minutes = 0;
                hours++;
            }

            Counter = $"Time currently wasted: {hours} hours, {minutes} minutes, {seconds} seconds";
            Time = hours * 3600 + minutes * 60 + seconds;

            Sandbox.Services.Stats.SetValue("time", Time);

            StateHasChanged();

            await Task.DelayRealtimeSeconds(1f);
        }
    }

    private int k;
    private double A = 0, B = 0, i, j;
    private double[] z = new double[1760];
    private char[] b = new char[1760];
    private StringBuilder output = new StringBuilder();

    private Task<StringBuilder> RenderDonut()
    {
        for (k = 0; k < 1760; k++)
        {
            z[k] = 0;
            b[k] = ' ';
        }

        for (j = 0; Math.PI * 2 > j; j += 0.07)
        {
            for (i = 0; Math.PI * 2 > i; i += 0.02)
            {
                double sini = Math.Sin(i),
                cosj = Math.Cos(j),
                sinA = Math.Sin(A),
                sinj = Math.Sin(j),
                cosA = Math.Cos(A),
                cosj2 = cosj + 2,
                mess = 1 / (sini * cosj2 * sinA + sinj * cosA + 5),
                cosi = Math.Cos(i),
                cosB = Math.Cos(B),
                sinB = Math.Sin(B),
                t = sini * cosj2 * cosA - sinj * sinA;

                int x = (int)(40 + 30 * mess * (cosi * cosj2 * cosB - t * sinB)),
                y = (int)(12 + 15 * mess * (cosi * cosj2 * sinB + t * cosB)),
                o = x + 80 * y,
                N = (int)(8 * ((sinj * sinA - sini * cosj * cosA) * cosB - sini * cosj * sinA - sinj * cosA - cosi * cosj * Math.Sin(B)));

                if (22 > y && y > 0 && x > 0 && 80 > x && mess > z[o])
                {
                    z[o] = mess;
                    b[o] = ".,-~:;=!*#$@"[N > 0 ? N : 0];
                }
            }
        }
        output.Clear();

        for (k = 0; k < 1761; k++)
            output.Append(k % 80 != 0 ? b[k] : '\n');

        A += 0.07; B += 0.03;

        return Task.FromResult(output);
    }
}