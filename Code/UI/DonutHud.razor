@using Sandbox.UI
@using Sandbox.Network
@using Sandbox.Services
@using System
@inherits PanelComponent
@implements Component.INetworkListener
@namespace Donut.UI

<root>
    <div class="left">
        <div class="current-song">
            <div>#hud.currentsong</div>
            <div>@GameManager.Instance.MusicPlayer.Title</div>
        </div>
    </div>
    <div class="center">
        <div class="leaderboard">
            @if (GameManager.Instance.Leaderboard is not null && GameManager.Instance.LeaderboardSwitching == false)
            {
                <section class="hellyeah">
                    <i onclick=@(() => GameManager.Instance.SwitchLeaderboard())>chevron_left</i>
                    <h1>@GameManager.Instance.Leaderboard.DisplayName</h1>
                    <i onclick=@(() => GameManager.Instance.SwitchLeaderboard())>chevron_right</i>
                </section>
                <div class="entries">
                    @foreach (var entry in GameManager.Instance.Leaderboard.Entries)
                    {
                        <div class="entry @IsMe(entry)">
                            <div class="rank">@($"{entry.Rank}.")</div>
                            <div class="name">@entry.DisplayName</div>
                            <div class="value">@entry.FormattedValue</div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
    <div class="right">
        <div class="player-list">
            @if (GameNetworkSystem.IsActive)
            {
                @foreach (var ply in Game.ActiveScene.GetAllComponents<Player>())
                {
                    <div class="player-entry">
                        <section class="yup">
                            <img src=@($"avatar:{ply?.Network.OwnerConnection.SteamId}") class="avatar" />
                            <section class="info">
                                <label class="name">@($"{ply?.Network.OwnerConnection.DisplayName}")</label>
                                <label class="time">@(ply?.Time)</label>
                            </section>
                        </section>
                        <i class="voice">@(ply.Components.Get<Voice>().IsListening ? "mic" : "mic_off")</i>
                        @if (Connection.Host == ply?.Network.OwnerConnection)
                        {
                            <i class="host">verified</i>
                        }
                        @if (Connection.Local.SteamId == 76561198842119514 && Connection.Local != ply.Network.OwnerConnection)
                        {
                            <i class="kick" onclick=@(() => GameManager.Kick(ply.Network.OwnerConnection.SteamId))>close</i>
                        }
                    </div>
                }
            }
        </div>
        <div class="bar">
            <i class="credits" onclick=@(() => Game.Overlay.ShowPackageModal(Game.Ident))>info</i>
            <div class="discord" onclick=@CopyDiscord />
            <i class="settings" onclick=@Game.Overlay.ShowBinds>settings</i>
            <div class="button" onclick=@Donate>Donate?</div>
        </div>
    </div>
</root>

@code
{
    private async void Donate()
    {
        if (ResourceLibrary.Get<GamePass>("data/donator.gamepass").Has())
        {
            Chatbox.Instance.AddLocalMessage("😔", $"You already own the donator perk!", "notification");
            return;
        }

        // thing we have to do until pointer event orders are fixed
        // https://github.com/Facepunch/sbox-issues/issues/5462
        Game.ActiveScene.Components.GetAll<PanelComponent>().ToList().ForEach(p => p.Panel.Style.PointerEvents = PointerEvents.None);

        await ResourceLibrary.Get<GamePass>("data/donator.gamepass").Purchase();

        // ditto
        Game.ActiveScene.Components.Get<ScreenPanel>().GetPanel().DeletionToken.Register(() =>
        {
            Game.ActiveScene.Components.GetAll<PanelComponent>().ToList().ForEach(p => p.Panel.Style.PointerEvents = PointerEvents.All);
        });
    }

    private void CopyDiscord()
    {
        Clipboard.SetText("https://discord.gg/rbCJdZjewf");
        Chatbox.Instance.AddLocalMessage("😊", $"Discord invite succesfully copied to clipboard!", "notification");
    }

    private string IsMe(Leaderboards.Entry entry)
    {
        return entry.Me ? "me" : "";
    }

    protected override int BuildHash() => HashCode.Combine(RealTime.GlobalNow);
}
