@using System
@using System.Text
@using System.Threading.Tasks
@using Sandbox.Network
@using Sandbox.Services
@inherits PanelComponent
@namespace Donut.UI

<root>
    <div class="donut-canvas">@DonutOutput</div>
    <div class="leaderboard">
        @if (leaderboard is not null)
        {
            <h1>@leaderboard.DisplayName</h1>
            <div class="entries">
                @foreach (var entry in leaderboard.Entries)
                {
                    <div class="entry @IsMe(entry)">
                        <div class="rank">@($"{entry.Rank}.")</div>
                        <div class="name">@entry.DisplayName</div>
                        <div class="value">@entry.FormattedValue</div>
                    </div>
                }
            </div>
        }
    </div>
    <div class="counter">@Counter</div>
</root>

@code
{
    private StringBuilder DonutOutput { get; set; }
    private string Counter { get; set; }

    protected override void OnAwake()
    {
        leaderboard = Leaderboards.Get("newtime");
        leaderboard.MaxEntries = 100;
    }

    protected override void OnUpdate()
    {
        _ = UpdateLeaderboardInfo();

        UpdateInput();
        UpdateDonut();
        UpdateTime();
        UpdateMusic();
    }

    protected override int BuildHash() => HashCode.Combine(RealTime.GlobalNow);

    RealTimeUntil donutDelay;

    private void UpdateDonut()
    {
        if (donutDelay)
        {
            donutDelay = 0.02f;

            StateHasChanged();

            DonutOutput = RenderDonut();

            StateHasChanged();
        }
    }

    private Leaderboards.Board leaderboard;

    private async Task UpdateLeaderboardInfo()
    {
        StateHasChanged();

        await leaderboard.Refresh();

        StateHasChanged();
    }

    string IsMe(Leaderboards.Entry entry)
    {
        return entry.Me ? "me" : "";
    }

    private int hours;
    private int minutes;
    private int seconds;
    RealTimeUntil timeDelay;

    private void UpdateTime()
    {
        if (timeDelay)
        {
            timeDelay = 1f;

            StateHasChanged();

            seconds++;
            if (seconds == 60)
            {
                seconds = 0;
                minutes++;
            }
            if (minutes == 60)
            {
                minutes = 0;
                hours++;
            }

            Counter = $"Time currently wasted: {hours} hours, {minutes} minutes, {seconds} seconds";

            if (PlayerController.Local.IsValid()) PlayerController.Local.Time = $"{hours}h{minutes}m{seconds}s";

            Stats.Increment("time2", 1f);

            StateHasChanged();
        }
    }

    double A = 0, B = 0, DELTA_A = 0.04, DELTA_B = 0.02, i, j;
    double[] z = new double[1760];
    char[] b = new char[1760];
    StringBuilder output = new StringBuilder();

    private StringBuilder RenderDonut()
    {
        for (int k = 0; k < 1760; k++)
        {
            z[k] = 0;
            b[k] = ' ';
        }

        for (j = 0; Math.PI * 2 > j; j += 0.07)
        {
            for (i = 0; Math.PI * 2 > i; i += 0.02)
            {
                double sini = Math.Sin(i),
                cosj = Math.Cos(j),
                sinA = Math.Sin(A),
                sinj = Math.Sin(j),
                cosA = Math.Cos(A),
                cosj2 = cosj + 2,
                mess = 1 / (sini * cosj2 * sinA + sinj * cosA + 5),
                cosi = Math.Cos(i),
                cosB = Math.Cos(B),
                sinB = Math.Sin(B),
                t = sini * cosj2 * cosA - sinj * sinA;

                int x = (int)(40 + 30 * mess * (cosi * cosj2 * cosB - t * sinB)),
                y = (int)(12 + 15 * mess * (cosi * cosj2 * sinB + t * cosB)),
                o = x + 80 * y,
                N = (int)(8 * ((sinj * sinA - sini * cosj * cosA) * cosB - sini * cosj * sinA - sinj * cosA - cosi * cosj *
                Math.Sin(B)));

                if (22 > y && y > 0 && x > 0 && 80 > x && mess > z[o])
                {
                    z[o] = mess;
                    b[o] = ".,-~:;=!*#$@"[N > 0 ? N : 0];
                }
            }
        }
        output.Clear();

        for (int k = 0; k < 1761; k++)
            output.Append(k % 80 != 0 ? b[k] : '\n');

        A += DELTA_A; B += DELTA_B;

        return output;
    }

    private void UpdateInput()
    {
        if (Input.Pressed("IncreaseRotationSpeedA"))
        {
            DELTA_A += 0.0025;
        }

        if (Input.Pressed("DecreaseRotationSpeedA"))
        {
            DELTA_A -= 0.0025;
        }

        if (Input.Pressed("IncreaseRotationSpeedB"))
        {
            DELTA_B += 0.0025;
        }

        if (Input.Pressed("DecreaseRotationSpeedB"))
        {
            DELTA_B -= 0.0025;
        }

        if (Input.Pressed("ResetRotationSpeed"))
        {
            DELTA_A = 0.04;
            DELTA_B = 0.02;
        }
    }

    public static string[] songs = new string[] {
    "addiction",
    "dead_lock",
    "space_debris",
    "unreal",
    "guitar_slinger",
    "aryx",
    "yuki_satellites",
    "celestial_fantasia",
    "funky_stars",
    "elysium",
    "winds_of_fjords",
    "hyperbased",
    "unreal_superhero_3"
    };

    public static List<int> usedIndices = new();
    public static MusicPlayer player;

    private void UpdateMusic()
    {
        if (player == null)
        {
            int newIndex;

            do { newIndex = Game.Random.Next(0, songs.Length); } while (usedIndices.Contains(newIndex));

            usedIndices.Add(newIndex);

            if (usedIndices.Count == songs.Length)
                usedIndices.Clear();

            player = MusicPlayer.Play(FileSystem.Mounted, $"sounds/music/{songs[newIndex]}.mp3");
        }

        player.OnFinished = () => { player = null; };
    }
}
