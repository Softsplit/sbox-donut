@using Sandbox.UI
@using Sandbox.Services
@attribute [Icon("message", "red", "white")]
@inherits PanelComponent
@implements Component.INetworkListener
@namespace Donut.UI

<root>
    <div class="chat_canvas">
        @foreach (var entry in Entries)
        {
            <ChatEntry Entry=@entry />
        }
    </div>
    <div class="input_canvas">
        <TextEntry @ref="InputBox" placeholder="Press ENTER/Y to chat..." onsubmit=@ChatFinished AllowEmojiReplace=@(true) />
    </div>
</root>

@code
{
    public static Chatbox Instance { get; private set; }

    public record Entry(long SteamId, string Name, string Message, string Styles, RealTimeSince TimeSinceBorn);

    private TextEntry InputBox;
    private List<Entry> Entries = new();

    protected override void OnUpdate()
    {
        Instance = this;

        if (InputBox is null) return;

        Panel.AcceptsFocus = false;

        if (Input.Pressed("Chat"))
            InputBox.Focus();

        if (Entries.Count > 200)
        {
            Entries.RemoveAt(0);

            StateHasChanged();
        }

        SetClass("open", InputBox.HasFocus);
    }

    void ChatFinished()
    {
        string text = InputBox.Text.Trim();
        string styles = "";
        InputBox.Text = "";

        if (string.IsNullOrWhiteSpace(text)) return;

        if (Player.Local.DonatorPerk.Has())
            styles += " rainbow";

        AddMessage(Game.SteamId.ToString(), text, styles);
    }

    public void AddLocalMessage(string sender, string message, string styles = "")
    {
        if (string.IsNullOrWhiteSpace(message)) return;

        Entries.Add(new Entry(0, sender, message, styles, 0));
        StateHasChanged();
    }

    [Broadcast]
    public void AddMessage(string sender, string message, string styles = "")
    {
        if (string.IsNullOrWhiteSpace(message)) return;

        long steamId = 0;
        string name = "";

        if (long.TryParse(sender, out steamId))
        {
            var friend = new Friend(steamId);
            name = friend.Name;
            steamId = (long)friend.Id;
        }
        else
        {
            name = sender;
        }

        Entries.Add(new Entry(steamId, name, message, styles, 0));
        StateHasChanged();
    }

    void Component.INetworkListener.OnConnected(Connection channel)
    {
        if (IsProxy) return;

        AddMessage("ðŸ‘‹", $"{channel.DisplayName} has started the simulation!", "notification");
    }

    void Component.INetworkListener.OnDisconnected(Connection channel)
    {
        if (IsProxy) return;

        AddMessage("ðŸ‘‹", $"{channel.DisplayName} has snapped back to reality!", "notification");
    }

    protected override int BuildHash() => System.HashCode.Combine("");
}
